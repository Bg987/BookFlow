const { v4: uuidv4 } = require("uuid");
const bcrypt = require("bcrypt");
const cloudinary = require("../config/cloudinary");
const Username = require("../models/username");
const Librarian = require("../models/Librarian");
const { sendEmail } = require("../config/mail");
const { addLibrarianEmail } = require("../utils/EmailsTemplate");

exports.addLibrarian = async (req, res) => {
    try {
        const lib_id = req.user.referenceId; // library referenceId from middleware
    const { name, dob, email, username, experience } = req.body;
        const profilePic = req.file;
    if (!name || !dob || !email || !username || !experience || !profilePic) {
      return res.status(400).json({ message: "All fields are required" });
    }

    const randomPassword = Math.random().toString(36).slice(-8);
    const hashedPassword = await bcrypt.hash(randomPassword, 10);
    const uniqueId = uuidv4();

    const uploadFromBuffer = (fileBuffer) =>
      new Promise((resolve, reject) => {
        const stream = cloudinary.uploader.upload_stream(
          { public_id: `librarian_${uuidv4()}`, folder: "BookFlow/Profile_Picture/librarians" },
          (error, result) => {
            if (error) reject(error);
            else resolve(result);
          }
        );

        const bufferStream = require("stream").PassThrough();
        bufferStream.end(fileBuffer);
        bufferStream.pipe(stream);
      });

    const result = await uploadFromBuffer(req.file.buffer);

    const profilePicUrl = result.secure_url;
        console.log(profilePicUrl);
    // Create MongoDB entry
    const newUser = await Username.create({
      username,
      email,
      password: hashedPassword,
      role: "librarian",
    referenceId : uniqueId,
    });

    // Generate verification token
    const verificationToken = uuidv4();
    const verificationExpire = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24h expiry

    // Create SQL entry
    const newLibrarian = await Librarian.create({
      librarian_id: uniqueId,
      lib_id,
      name,
      dob,
      experience,
      is_verified: false,
      verification_token: verificationToken,
      verification_token_expire: verificationExpire,
    });

    const verifyLink = `${process.env.FRONTEND_URL}/verify-librarian?token=${verificationToken}`;

    // Send email
    // await sendEmail({
    //   to: email,
    //   subject: "BookFlow Librarian Account Created",
    //   html: addLibrarianEmail({
    //     name,
    //     username,
    //     password: randomPassword,
    //     verifyLink,
    //   }),
    // });

    res.status(201).json({
      message: "Librarian added successfully, email sent for verification",
      data: newLibrarian,
    });
  } catch (error) {
    console.error("Error adding librarian:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};
